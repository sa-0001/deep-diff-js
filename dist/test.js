// Generated by CoffeeScript 1.12.7
var _, deepDiff, leftValues, log, rightValues, simpleValues1, simpleValues2, tap;

log = console.log.bind(console);

tap = require('@sa0001/wrap-tap');

_ = require('lodash');

_.pretty = require('@sa0001/pretty-print');

deepDiff = require('./index');

simpleValues1 = {
  nul: null,
  bool_1: true,
  bool_2: false,
  num_1: 123,
  num_2: 4.56,
  str_1: 'abc',
  str_2: 'DEF'
};

simpleValues2 = {
  nul: null,
  bool_1: false,
  bool_2: true,
  num_1: 4.56,
  num_2: 123,
  str_1: 'DEF',
  str_2: 'abc'
};

leftValues = {
  bool: true,
  num: 123,
  str: 'abc',
  arr: ['a', 1],
  obj: {
    a: 1
  },
  bool_nul: true,
  num_nul: 123,
  str_nul: 'abc',
  arr_nul: ['a', 1],
  obj_nul: {
    a: 1
  },
  bool_und: true,
  num_und: 123,
  str_und: 'abc',
  arr_und: ['a', 1],
  obj_und: {
    a: 1
  },
  nul_bool: null,
  nul_num: null,
  nul_str: null,
  nul_arr: null,
  nul_obj: null,
  und_bool: void 0,
  und_num: void 0,
  und_str: void 0,
  und_arr: void 0,
  und_obj: void 0,
  deep_arr_same: [0, _.values(simpleValues1), _.values(simpleValues2)],
  deep_arr_diff: [0, _.values(simpleValues1), _.values(simpleValues2)],
  deep_obj_same: {
    a: 0,
    b: simpleValues1,
    c: simpleValues2
  },
  deep_obj_diff: {
    a: 0,
    b: simpleValues1,
    c: simpleValues2
  }
};

rightValues = {
  bool: true,
  num: 123,
  str: 'abc',
  arr: ['a', 1],
  obj: {
    a: 1
  },
  bool_nul: null,
  num_nul: null,
  str_nul: null,
  arr_nul: null,
  obj_nul: null,
  bool_und: void 0,
  num_und: void 0,
  str_und: void 0,
  arr_und: void 0,
  obj_und: void 0,
  nul_bool: false,
  nul_num: 4.56,
  nul_str: 'DEF',
  nul_arr: ['b', 2],
  nul_obj: {
    b: 2
  },
  und_bool: false,
  und_num: 4.56,
  und_str: 'DEF',
  und_arr: ['b', 2],
  und_obj: {
    b: 2
  },
  deep_arr_same: [0, _.values(simpleValues1), _.values(simpleValues2)],
  deep_arr_diff: [0, _.values(simpleValues2), _.values(simpleValues1)],
  deep_obj_same: {
    a: 0,
    b: simpleValues1,
    c: simpleValues2
  },
  deep_obj_diff: {
    a: 0,
    b: simpleValues2,
    c: simpleValues1
  }
};

tap.test('deep-diff', function(t) {
  t.test('deep', function(t) {
    var diff;
    diff = deepDiff(leftValues, rightValues);
    return t.eq(_.pretty(diff), "{\n	arr_nul: {\n		l: [ \"a\", 1 ],\n		r: null\n	},\n	arr_und: {\n		l: [ \"a\", 1 ],\n		r: undefined\n	},\n	bool_nul: { l: true, r: null },\n	bool_und: { l: true, r: undefined },\n	deep_arr_diff: {\n		\"1\": {\n			\"1\": { l: true, r: false },\n			\"2\": { l: false, r: true },\n			\"3\": { l: 123, r: 4.56 },\n			\"4\": { l: 4.56, r: 123 },\n			\"5\": { l: \"abc\", r: \"DEF\" },\n			\"6\": { l: \"DEF\", r: \"abc\" }\n		},\n		\"2\": {\n			\"1\": { l: false, r: true },\n			\"2\": { l: true, r: false },\n			\"3\": { l: 4.56, r: 123 },\n			\"4\": { l: 123, r: 4.56 },\n			\"5\": { l: \"DEF\", r: \"abc\" },\n			\"6\": { l: \"abc\", r: \"DEF\" }\n		}\n	},\n	deep_obj_diff: {\n		b: {\n			bool_1: { l: true, r: false },\n			bool_2: { l: false, r: true },\n			num_1: { l: 123, r: 4.56 },\n			num_2: { l: 4.56, r: 123 },\n			str_1: { l: \"abc\", r: \"DEF\" },\n			str_2: { l: \"DEF\", r: \"abc\" }\n		},\n		c: {\n			bool_1: { l: false, r: true },\n			bool_2: { l: true, r: false },\n			num_1: { l: 4.56, r: 123 },\n			num_2: { l: 123, r: 4.56 },\n			str_1: { l: \"DEF\", r: \"abc\" },\n			str_2: { l: \"abc\", r: \"DEF\" }\n		}\n	},\n	nul_arr: {\n		l: null,\n		r: [ \"b\", 2 ]\n	},\n	nul_bool: { l: null, r: false },\n	nul_num: { l: null, r: 4.56 },\n	nul_obj: {\n		l: null,\n		r: { b: 2 }\n	},\n	nul_str: { l: null, r: \"DEF\" },\n	num_nul: { l: 123, r: null },\n	num_und: { l: 123, r: undefined },\n	obj_nul: {\n		l: { a: 1 },\n		r: null\n	},\n	obj_und: {\n		l: { a: 1 },\n		r: undefined\n	},\n	str_nul: { l: \"abc\", r: null },\n	str_und: { l: \"abc\", r: undefined },\n	und_arr: {\n		l: undefined,\n		r: [ \"b\", 2 ]\n	},\n	und_bool: { l: undefined, r: false },\n	und_num: { l: undefined, r: 4.56 },\n	und_obj: {\n		l: undefined,\n		r: { b: 2 }\n	},\n	und_str: { l: undefined, r: \"DEF\" }\n}");
  });
  t.test('shallow', function(t) {
    var diff;
    diff = deepDiff(leftValues, rightValues, {
      shallow: true
    });
    return t.eq(_.pretty(diff), "{\n	arr_nul: {\n		l: [ \"a\", 1 ],\n		r: null\n	},\n	arr_und: {\n		l: [ \"a\", 1 ],\n		r: undefined\n	},\n	bool_nul: { l: true, r: null },\n	bool_und: { l: true, r: undefined },\n	deep_arr_diff: {\n		l: [\n			0,\n			[ null, true, false, 123, 4.56, \"abc\", \"DEF\" ],\n			[ null, false, true, 4.56, 123, \"DEF\", \"abc\" ]\n		],\n		r: [\n			0,\n			[ null, false, true, 4.56, 123, \"DEF\", \"abc\" ],\n			[ null, true, false, 123, 4.56, \"abc\", \"DEF\" ]\n		]\n	},\n	deep_obj_diff: {\n		l: {\n			a: 0,\n			b: {\n				nul: null,\n				bool_1: true,\n				bool_2: false,\n				num_1: 123,\n				num_2: 4.56,\n				str_1: \"abc\",\n				str_2: \"DEF\"\n			},\n			c: {\n				nul: null,\n				bool_1: false,\n				bool_2: true,\n				num_1: 4.56,\n				num_2: 123,\n				str_1: \"DEF\",\n				str_2: \"abc\"\n			}\n		},\n		r: { a: 0, b: '<<Recursive>>', c: '<<Recursive>>' }\n	},\n	nul_arr: {\n		l: null,\n		r: [ \"b\", 2 ]\n	},\n	nul_bool: { l: null, r: false },\n	nul_num: { l: null, r: 4.56 },\n	nul_obj: {\n		l: null,\n		r: { b: 2 }\n	},\n	nul_str: { l: null, r: \"DEF\" },\n	num_nul: { l: 123, r: null },\n	num_und: { l: 123, r: undefined },\n	obj_nul: {\n		l: { a: 1 },\n		r: null\n	},\n	obj_und: {\n		l: { a: 1 },\n		r: undefined\n	},\n	str_nul: { l: \"abc\", r: null },\n	str_und: { l: \"abc\", r: undefined },\n	und_arr: {\n		l: undefined,\n		r: [ \"b\", 2 ]\n	},\n	und_bool: { l: undefined, r: false },\n	und_num: { l: undefined, r: 4.56 },\n	und_obj: {\n		l: undefined,\n		r: { b: 2 }\n	},\n	und_str: { l: undefined, r: \"DEF\" }\n}");
  });
  t.test('ignoreNullVsUndefined', function(t) {
    var diff, left, right;
    left = {
      a: true,
      b: null,
      c: void 0,
      e: {
        a: true,
        b: null,
        c: void 0
      }
    };
    right = {
      a: false,
      c: void 0,
      d: null,
      e: {
        a: false,
        c: void 0,
        d: null
      }
    };
    diff = deepDiff(left, right, {
      ignoreNullVsUndefined: true
    });
    return t.eq(_.pretty(diff), "{\n	a: { l: true, r: false },\n	e: {\n		a: { l: true, r: false }\n	}\n}");
  });
  return t.test('keepRight', function(t) {
    var diff;
    diff = deepDiff(leftValues, rightValues, {
      keepRight: true
    });
    return t.eq(_.pretty(diff), "{\n	arr_nul: null,\n	arr_und: undefined,\n	bool_nul: null,\n	bool_und: undefined,\n	deep_arr_diff: [\n		0,\n		[ null, false, true, 4.56, 123, \"DEF\", \"abc\" ],\n		[ null, true, false, 123, 4.56, \"abc\", \"DEF\" ]\n	],\n	deep_obj_diff: {\n		a: 0,\n		b: {\n			nul: null,\n			bool_1: false,\n			bool_2: true,\n			num_1: 4.56,\n			num_2: 123,\n			str_1: \"DEF\",\n			str_2: \"abc\"\n		},\n		c: {\n			nul: null,\n			bool_1: true,\n			bool_2: false,\n			num_1: 123,\n			num_2: 4.56,\n			str_1: \"abc\",\n			str_2: \"DEF\"\n		}\n	},\n	nul_arr: [ \"b\", 2 ],\n	nul_bool: false,\n	nul_num: 4.56,\n	nul_obj: { b: 2 },\n	nul_str: \"DEF\",\n	num_nul: null,\n	num_und: undefined,\n	obj_nul: null,\n	obj_und: undefined,\n	str_nul: null,\n	str_und: undefined,\n	und_arr: [ \"b\", 2 ],\n	und_bool: false,\n	und_num: 4.56,\n	und_obj: { b: 2 },\n	und_str: \"DEF\"\n}");
  });
});
