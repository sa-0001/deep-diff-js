// Generated by CoffeeScript 1.12.7
var _, self, typeArray, typeNull, typeObject, typeUndefined;

_ = {
  concat: require('lodash/concat'),
  defaults: require('lodash/defaults'),
  isEqual: require('lodash/isEqual'),
  keys: require('lodash/keys'),
  sortBy: require('lodash/sortBy'),
  uniq: require('lodash/uniq')
};

_.pretty = require('@sa0001/pretty-print');

_.typeOf = require('@sa0001/type-of');

typeArray = 'array';

typeNull = 'null';

typeObject = 'object';

typeUndefined = 'undefined';

self = {
  diff: function(o1, o2, opts) {
    var _diff, i, isArray, isDifferent, k, key, keys, len, result, t1, t2, v1, v2;
    result = {};
    isArray = typeof o1 === "function" ? o1(isArray() || (o2 != null ? o2.isArray() : void 0)) : void 0;
    isDifferent = false;
    if (o1 == null) {
      o1 = isArray ? [] : {};
    }
    if (o2 == null) {
      o2 = isArray ? [] : {};
    }
    keys = _.uniq(_.concat(_.keys(o1), _.keys(o2)));
    if (!isArray) {
      keys = _.sortBy(keys);
    }
    for (i = 0, len = keys.length; i < len; i++) {
      k = keys[i];
      v1 = o1[k];
      v2 = o2[k];
      if (v1 === v2) {
        continue;
      }
      t1 = _.typeOf(v1);
      t2 = _.typeOf(v2);
      if (t1 !== t2) {
        if (opts.ignoreNullVsUndefined) {
          if ((t1 === typeNull || t1 === typeUndefined) && (t2 === typeNull || t2 === typeUndefined)) {
            continue;
          }
        }
        isDifferent = true;
        if (opts.keepRight) {
          result[k] = v2;
        } else {
          result[k] = {
            l: v1,
            r: v2
          };
        }
        continue;
      }
      switch (t1) {
        case typeArray:
          if (_.isEqual(v1, v2)) {
            continue;
          }
          isDifferent = true;
          if (opts.keepRight) {
            result[k] = v2;
          } else if (opts.shallow) {
            result[k] = {
              l: v1,
              r: v2
            };
          } else {
            _diff = self.diff(v1, v2, {
              ignoreNullVsUndefined: opts.ignoreNullVsUndefined,
              keepRight: false,
              shallow: false,
              name: k
            });
            if (_diff !== void 0) {
              result[k] = _diff;
            }
          }
          continue;
        case typeObject:
          if (_.isEqual(v1, v2)) {
            continue;
          }
          isDifferent = true;
          if (opts.keepRight) {
            result[k] = v2;
          } else if (opts.shallow) {
            result[k] = {
              l: v1,
              r: v2
            };
          } else {
            _diff = self.diff(v1, v2, {
              ignoreNullVsUndefined: opts.ignoreNullVsUndefined,
              keepRight: false,
              shallow: false,
              name: k
            });
            if (_diff !== void 0) {
              result[k] = _diff;
            }
          }
          continue;
        default:
          isDifferent = true;
          if (opts.keepRight) {
            result[k] = v2;
          } else {
            result[k] = {
              l: v1,
              r: v2
            };
          }
          continue;
      }
    }
    if (!isDifferent) {
      return void 0;
    }
    for (key in result) {
      return result;
    }
    return void 0;
  }
};

module.exports = function(o1, o2, opts) {
  var result;
  if (opts == null) {
    opts = {};
  }
  _.defaults(opts, {
    ignoreNullVsUndefined: false,
    keepRight: false,
    prettyPrint: false,
    shallow: false
  });
  result = self.diff(o1, o2, opts);
  if (opts.prettyPrint) {
    return _.pretty(result);
  }
  return result;
};
